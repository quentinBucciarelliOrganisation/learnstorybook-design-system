{"ast":null,"code":"import _objectWithoutProperties from \"/Users/Quentin/Desktop/learnstorybook-design-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"/Users/Quentin/Desktop/learnstorybook-design-system/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/Quentin/Desktop/learnstorybook-design-system/src/Icon.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  fill: currentColor;\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: \", \";\\n  vertical-align: middle;\\n\\n  shape-rendering: inherit;\\n  transform: translate3d(0, 0, 0);\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { icons } from './shared/icons';\nconst Svg = styled.svg(_templateObject(), props => props.block ? 'block' : 'inline-block');\nconst Path = styled.path(_templateObject2());\n/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */\n\nexport function Icon(_ref) {\n  let icon = _ref.icon,\n      block = _ref.block,\n      props = _objectWithoutProperties(_ref, [\"icon\", \"block\"]);\n\n  return React.createElement(Svg, Object.assign({\n    viewBox: \"0 0 1024 1024\",\n    width: \"20px\",\n    height: \"20px\",\n    block: block\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(Path, {\n    d: icons[icon],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n}\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  block: PropTypes.bool\n};\nIcon.defaultProps = {\n  block: false\n};","map":{"version":3,"sources":["/Users/Quentin/Desktop/learnstorybook-design-system/src/Icon.js"],"names":["React","PropTypes","styled","icons","Svg","svg","props","block","Path","path","Icon","icon","propTypes","string","isRequired","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,GAAG,GAAGF,MAAM,CAACG,GAAV,oBACIC,KAAK,IAAKA,KAAK,CAACC,KAAN,GAAc,OAAd,GAAwB,cADtC,CAAT;AAQA,MAAMC,IAAI,GAAGN,MAAM,CAACO,IAAV,oBAAV;AAIA;;;;;;;;AAOA,OAAO,SAASC,IAAT,OAAyC;AAAA,MAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,MAAnBJ,KAAmB,QAAnBA,KAAmB;AAAA,MAATD,KAAS;;AAC9C,SACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAC,eAAb;AAA6B,IAAA,KAAK,EAAC,MAAnC;AAA0C,IAAA,MAAM,EAAC,MAAjD;AAAwD,IAAA,KAAK,EAAEC;AAA/D,KAA0ED,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAEH,KAAK,CAACQ,IAAD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD;AAEDD,IAAI,CAACE,SAAL,GAAiB;AACfD,EAAAA,IAAI,EAAEV,SAAS,CAACY,MAAV,CAAiBC,UADR;AAEfP,EAAAA,KAAK,EAAEN,SAAS,CAACc;AAFF,CAAjB;AAKAL,IAAI,CAACM,YAAL,GAAoB;AAClBT,EAAAA,KAAK,EAAE;AADW,CAApB","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { icons } from './shared/icons';\n\nconst Svg = styled.svg`\n  display: ${props => (props.block ? 'block' : 'inline-block')};\n  vertical-align: middle;\n\n  shape-rendering: inherit;\n  transform: translate3d(0, 0, 0);\n`;\n\nconst Path = styled.path`\n  fill: currentColor;\n`;\n\n/**\n * An Icon is a piece of visual element, but we must ensure its accessibility while using it.\n * It can have 2 purposes:\n *\n * - *decorative only*: for example, it illustrates a label next to it. We must ensure that it is ignored by screen readers, by setting `aria-hidden` attribute (ex: `<Icon icon=\"check\" aria-hidden />`)\n * - *non-decorative*: it means that it delivers information. For example, an icon as only child in a button. The meaning can be obvious visually, but it must have a proper text alternative via `aria-label` for screen readers. (ex: `<Icon icon=\"print\" aria-label=\"Print this document\" />`)\n */\nexport function Icon({ icon, block, ...props }) {\n  return (\n    <Svg viewBox=\"0 0 1024 1024\" width=\"20px\" height=\"20px\" block={block} {...props}>\n      <Path d={icons[icon]} />\n    </Svg>\n  );\n}\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n  block: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  block: false,\n};\n"]},"metadata":{},"sourceType":"module"}